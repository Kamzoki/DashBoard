//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace NozomDashBoard.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class NozomDashBoardEntities : DbContext
    {
        public NozomDashBoardEntities()
            : base("name=NozomDashBoardEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<DashBoardData> DashBoardData { get; set; }
        public virtual DbSet<Project> Project { get; set; }
        public virtual DbSet<Users> Users { get; set; }
    
        public virtual ObjectResult<string> CheckAuthurizationInfo(Nullable<int> userId, string userPassWord)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var userPassWordParameter = userPassWord != null ?
                new ObjectParameter("UserPassWord", userPassWord) :
                new ObjectParameter("UserPassWord", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("CheckAuthurizationInfo", userIdParameter, userPassWordParameter);
        }
    
        public virtual int EditTask(Nullable<int> id, string title, string details, Nullable<System.DateTime> startingDate, Nullable<System.DateTime> deadLine, Nullable<bool> isFinished, string dependancy, string notes, Nullable<int> userId)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var titleParameter = title != null ?
                new ObjectParameter("Title", title) :
                new ObjectParameter("Title", typeof(string));
    
            var detailsParameter = details != null ?
                new ObjectParameter("Details", details) :
                new ObjectParameter("Details", typeof(string));
    
            var startingDateParameter = startingDate.HasValue ?
                new ObjectParameter("StartingDate", startingDate) :
                new ObjectParameter("StartingDate", typeof(System.DateTime));
    
            var deadLineParameter = deadLine.HasValue ?
                new ObjectParameter("DeadLine", deadLine) :
                new ObjectParameter("DeadLine", typeof(System.DateTime));
    
            var isFinishedParameter = isFinished.HasValue ?
                new ObjectParameter("isFinished", isFinished) :
                new ObjectParameter("isFinished", typeof(bool));
    
            var dependancyParameter = dependancy != null ?
                new ObjectParameter("Dependancy", dependancy) :
                new ObjectParameter("Dependancy", typeof(string));
    
            var notesParameter = notes != null ?
                new ObjectParameter("Notes", notes) :
                new ObjectParameter("Notes", typeof(string));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("EditTask", idParameter, titleParameter, detailsParameter, startingDateParameter, deadLineParameter, isFinishedParameter, dependancyParameter, notesParameter, userIdParameter);
        }
    
        public virtual int SetTaskFinished(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SetTaskFinished", idParameter);
        }
    
        public virtual int DeleteTasks(Nullable<System.DateTime> startingDate, Nullable<System.DateTime> endingDate)
        {
            var startingDateParameter = startingDate.HasValue ?
                new ObjectParameter("startingDate", startingDate) :
                new ObjectParameter("startingDate", typeof(System.DateTime));
    
            var endingDateParameter = endingDate.HasValue ?
                new ObjectParameter("endingDate", endingDate) :
                new ObjectParameter("endingDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteTasks", startingDateParameter, endingDateParameter);
        }
    
        public virtual ObjectResult<EquireTasks_Result> EquireTasks(Nullable<int> projectID)
        {
            var projectIDParameter = projectID.HasValue ?
                new ObjectParameter("ProjectID", projectID) :
                new ObjectParameter("ProjectID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<EquireTasks_Result>("EquireTasks", projectIDParameter);
        }
    }
}
